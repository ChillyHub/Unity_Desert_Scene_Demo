#pragma kernel SSPRMappingCSClear
#pragma kernel SSPRMappingCSSyncClear
#pragma kernel SSPRMappingCSPreUV
#pragma kernel SSPRMappingCSMain
#pragma kernel SSPRMappingCSSync
#pragma kernel SSPRMappingCSSyncResolve
#pragma kernel SSPRFillHole

SamplerState PointClampSampler;
SamplerState LinearClampSampler;
RWTexture2D<float2> _UVMappingTexture;
RWTexture2D<uint> _UVSyncMappingTexture;
Texture2D<float4> _CameraDepthTexture;

float _UVMappingWidth;
float _UVMappingHeight;

float3 _PlanePosition;
float3 _PlaneNormal;

#include "Assets/Shaders/ShaderLibrary/Utility.hlsl"

uint EncodeMappingUV(uint2 srcScreenPos)
{
    return srcScreenPos.y << 16 | srcScreenPos.x;
}

float2 DecodeMappingUV(uint n, float width, float height)
{
    uint x = n & 0xffff;
    uint y = n >> 16;

    float2 res = float2((float)x + 0.5, (float)y + 0.5) / float2(width, height);

    return res;
}

[numthreads(16, 16, 1)]
void SSPRMappingCSClear(uint3 id : SV_DispatchThreadID)
{
    _UVMappingTexture[id.xy] = float2(-1.0, -1.0);
}

[numthreads(16, 16, 1)]
void SSPRMappingCSSyncClear(uint3 id : SV_DispatchThreadID)
{
    _UVMappingTexture[id.xy] = float2(-1.0, -1.0);
    _UVSyncMappingTexture[id.xy] = UINT_MAX;
}

[numthreads(16, 16, 1)]
void SSPRMappingCSPreUV(uint3 id : SV_DispatchThreadID)
{
    float w = _UVMappingWidth;
    float h = _UVMappingHeight;

    float2 positionNDC = float2(((float)id.x + 0.5) / w, ((float)id.y + 0.5) / h);
    
    float deviceDepth = _CameraDepthTexture.SampleLevel(PointClampSampler, positionNDC, 0).r;
    float3 srcPosWS = ComputeWorldSpacePosition(positionNDC, deviceDepth, unity_MatrixInvVP);

    UNITY_BRANCH
    if (dot(srcPosWS - _PlanePosition, _PlaneNormal) < 0.0)
    {
        return;
    }

    float3 destPosWS = srcPosWS - 2.0 * _PlaneNormal * dot(_PlaneNormal, srcPosWS - _PlanePosition);
    float2 destUV = ComputeNormalizedDeviceCoordinates(destPosWS, unity_MatrixVP);

    uint2 destScreenPos = uint2((uint)(destUV.x * w), (uint)(destUV.y * h));
    
    _UVMappingTexture[destScreenPos] = positionNDC;
}

[numthreads(16, 16, 1)]
void SSPRMappingCSMain(uint3 id : SV_DispatchThreadID)
{
    float w = _UVMappingWidth;
    float h = _UVMappingHeight;

    float2 positionNDC = float2(((float)id.x + 0.5) / w, ((float)id.y + 0.5) / h);
    
    float deviceDepth = _CameraDepthTexture.SampleLevel(PointClampSampler, positionNDC, 0).r;
    float3 srcPosWS = ComputeWorldSpacePosition(positionNDC, deviceDepth, unity_MatrixInvVP);

    UNITY_BRANCH
    if (dot(srcPosWS - _PlanePosition, _PlaneNormal) < 0.0)
    {
        return;
    }

    float3 destPosWS = srcPosWS - 2.0 * _PlaneNormal * dot(_PlaneNormal, srcPosWS - _PlanePosition);
    float2 destUV = ComputeNormalizedDeviceCoordinates(destPosWS, unity_MatrixVP);
    
    uint2 destScreenPos = uint2((uint)(destUV.x * w), (uint)(destUV.y * h));

    float2 currUV = _UVMappingTexture[destScreenPos];
    float currDepth = _CameraDepthTexture.SampleLevel(PointClampSampler, currUV, 0).r;
    float3 currPosWS = ComputeWorldSpacePosition(currUV, currDepth, unity_MatrixInvVP);
    
    if ((srcPosWS.y - _PlanePosition.y) < (currPosWS.y - _PlanePosition.y))
    {                                                                                                
        _UVMappingTexture[destScreenPos] = positionNDC;
    }
}

[numthreads(16, 16, 1)]
void SSPRMappingCSSync(uint3 id : SV_DispatchThreadID)
{
    float w = _UVMappingWidth;
    float h = _UVMappingHeight;

    float2 positionNDC = float2(((float)id.x + 0.5) / w, ((float)id.y + 0.5) / h);
    
    float deviceDepth = _CameraDepthTexture.SampleLevel(PointClampSampler, positionNDC, 0).r;
    float3 srcPosWS = ComputeWorldSpacePosition(positionNDC, deviceDepth, unity_MatrixInvVP);

    UNITY_BRANCH
    if (dot(srcPosWS - _PlanePosition, _PlaneNormal) < 0.0)
    {
        return;
    }

    float3 destPosWS = srcPosWS - 2.0 * _PlaneNormal * dot(_PlaneNormal, srcPosWS - _PlanePosition);
    float2 destUV = ComputeNormalizedDeviceCoordinates(destPosWS, unity_MatrixVP);
    
    uint2 destScreenPos = uint2((uint)(destUV.x * w), (uint)(destUV.y * h));
    
    InterlockedMin(_UVSyncMappingTexture[destScreenPos], EncodeMappingUV(id.xy));
}

[numthreads(16, 16, 1)]
void SSPRMappingCSSyncResolve(uint3 id : SV_DispatchThreadID)
{
    float w = _UVMappingWidth;
    float h = _UVMappingHeight;

    uint uv = _UVSyncMappingTexture[id.xy].x;

    UNITY_BRANCH
    if (uv == UINT_MAX)
    {
        return;
    }
    
    _UVMappingTexture[id.xy] = DecodeMappingUV(uv, w, h);
}

[numthreads(16, 16, 1)]
void SSPRFillHole(uint3 id : SV_DispatchThreadID)
{
    float w = _UVMappingWidth;
    float h = _UVMappingHeight;

    float2 uv = _UVMappingTexture[id.xy];

    UNITY_BRANCH
    if (uv.x < 0.0 || uv.y < 0.0)
    {
        uint2 offsets[5] = {
            uint2(0, 1), uint2(1, 0), uint2(1, 1), uint2(0, 2), uint2(2, 0)
        };

        for (int i = 0; i < 5; ++i)
        {
            float2 newUV = _UVMappingTexture[id.xy + offsets[i]];

            UNITY_BRANCH
            if (newUV.x >= 0.0 && newUV.y >= 0.0)
            {
                _UVMappingTexture[id.xy] = newUV;
                return;
            }
        }
    }
}
