#pragma kernel SSPRMappingCSMain

RWTexture2D<uint> _UVMappingTexture;
Texture2D<float4> _CameraDepthTexture;
SamplerState PointClampSampler;
SamplerState LinearClampSampler;

float3 _PlanePosition;
float3 _PlaneNormal;

#include "Assets/Shaders/ShaderLibrary/Utility.hlsl"

uint EncodeMappingUV(uint2 srcScreenPos)
{
    return srcScreenPos.y << 16 | srcScreenPos.x;
}

[numthreads(16, 16, 1)]
void SSPRMappingCSMain(uint3 id : SV_DispatchThreadID)
{
    float w, h;
    _UVMappingTexture.GetDimensions(w, h);

    _UVMappingTexture[id.xy] = 0u;

    float2 positionNDC = float2(((float)id.x + 0.5) / w, ((float)id.y + 0.5) / h);
    float deviceDepth = _CameraDepthTexture.SampleLevel(PointClampSampler, positionNDC, 0).r;
    float3 srcPosWS = ComputeWorldSpacePosition(positionNDC, deviceDepth, unity_MatrixInvVP);

    UNITY_BRANCH
    if (dot(srcPosWS - _PlanePosition, _PlaneNormal) < 0.0)
    {
        return;
    }

    float3 destPosWS = srcPosWS - 2.0 * _PlaneNormal * dot(_PlaneNormal, srcPosWS - _PlanePosition);
    float2 destUV = ComputeNormalizedDeviceCoordinates(destPosWS, unity_MatrixVP);

    uint2 destScreenPos = uint2((uint)(destUV.x * w), (uint)(destUV.y) * h);
    
    uint n;
    InterlockedMax(_UVMappingTexture[destScreenPos], EncodeMappingUV(id.xy), n);
}